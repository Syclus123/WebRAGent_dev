"""
This script is used to parse the log file generated by my system.
Run this script to parse the log files into the JSON format required by Online-Mind2Web.
The parameters are configured in: configs/log_config.json
"""
import os
import json
from log_processor import LogProcessor
from utils import save_json, load_json

def main():
    config_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'configs/log_config.json')
    config = load_json(config_path)
    log_directory = config.get('log_directory', '')
    output_directory = config.get('output_directory', 'results')
    task_mapping_file = config.get('task_mapping_file', '')
    
    if not log_directory:
        print("Error: set log_directory")
        return

    if not os.path.exists(task_mapping_file):
        print(f"Error: Task mapping file does not exist: {task_mapping_file}")

    if not os.path.exists(output_directory):
        os.makedirs(output_directory)

    print(f"Start processing the log file directory: {log_directory}")
    processed_count = 0
    
    for filename in os.listdir(log_directory):
        if filename.endswith('.log'):
            try:
                log_file_path = os.path.join(log_directory, filename)
                print(f"In the process: {filename}")
                
                processor = LogProcessor(log_file_path, task_mapping_file)
                result = processor.parse_log()
                
                if not result["task_id"]:
                    print(f"Error: The task ID or task name cannot be extracted from the log file: {filename}")
                    continue
                
                output_file = os.path.join(output_directory, f"{result['task_id']}.json")
                save_json(output_file, result)
                processed_count += 1
                
            except Exception as e:
                print(f"Error: {filename}: {e}")

    print(f"Finish: {processed_count} log files were successfully parsed")

if __name__ == '__main__':
    main()