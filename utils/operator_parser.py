"""
This script is used to parse the operator log files generated by the operator system.
Run this script to parse the operator log files into the JSON format required by Online-Mind2Web.
The parameters are configured in: configs/operator_log_config.json
"""
import os
import json
from operator_log_processor import OperatorLogProcessor
from utils import save_json, load_json

def main():
    config_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'configs/operator_log_config.json')
    
    # 如果配置文件不存在，使用默认配置
    if not os.path.exists(config_path):
        config = {
            "log_directory": "./results_operator/batch_exp/logs",
            "output_directory": "./results_operator/batch_exp/json",
            "task_mapping_file": "./data/Online-Mind2Web/Online_Mind2Web.json"
        }
        print(f"Configuration file not found, using default configuration")
    else:
        config = load_json(config_path)
    
    log_directory = config.get('log_directory', './results_operator/batch_exp/logs')
    output_directory = config.get('output_directory', './results_operator/batch_exp/json')
    task_mapping_file = config.get('task_mapping_file', './data/Online-Mind2Web/Online_Mind2Web.json')
    
    if not log_directory:
        print("Error: set log_directory")
        return

    if not os.path.exists(log_directory):
        print(f"Error: Log directory does not exist: {log_directory}")
        return

    if task_mapping_file and not os.path.exists(task_mapping_file):
        print(f"Warning: Task mapping file does not exist: {task_mapping_file}")

    if not os.path.exists(output_directory):
        os.makedirs(output_directory)

    print(f"Start processing the operator log file directory: {log_directory}")
    processed_count = 0
    
    for filename in os.listdir(log_directory):
        if filename.endswith('.log'):
            try:
                log_file_path = os.path.join(log_directory, filename)
                print(f"Processing: {filename}")
                
                processor = OperatorLogProcessor(log_file_path, task_mapping_file)
                result = processor.parse_log()
                
                if not result["task"]:
                    print(f"Warning: Cannot extract task name from log file: {filename}")
                    # 使用文件名作为task_id
                    result["task_id"] = filename.replace('.log', '')
                
                # 如果没有task_id，使用文件名
                if not result["task_id"]:
                    result["task_id"] = filename.replace('.log', '')
                
                output_file = os.path.join(output_directory, f"{result['task_id']}.json")
                save_json(output_file, result)
                processed_count += 1
                
                print(f"Successfully processed: {filename} -> {result['task_id']}.json")
                
            except Exception as e:
                print(f"Error processing {filename}: {e}")

    print(f"Finished: {processed_count} operator log files were successfully parsed")

if __name__ == '__main__':
    main() 